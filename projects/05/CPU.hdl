// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
Mux(a=true,b=instruction[5],sel=instruction[15],out=outAload);
    Mux16(a=instruction,b=outMofALU,sel=instruction[15],out=mux1);
ARegister(in=mux1,load=outAload,out=outA,out[0..14]=addressM);





Mux16(a=outA,b=inM,sel=instruction[12],out=outAM); 


Mux(a=false,b=instruction[3],sel=instruction[15],out=writeM);


Mux(a=false,b=instruction[4],sel=instruction[15],out=outDload);
DRegister(in=outMofALU,load=outDload,out=outD);

ALU(x=outD,y=outAM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=outMofALU ,zr=zr,ng=ng);

Not(in=zr,out=notzr);
Not(in=ng,out=notng);

And(a=instruction[0],b=instruction[1],out=onejmp);
And(a=instruction[2],b=onejmp,out=twojmp);
And(a=instruction[15],b=twojmp,out=jmp);

And(a=instruction[2],b=instruction[1],out=onejle);
And(a=ng,b=onejle,out=jle);
And(a=zr,b=onejle,out=jleAn);

And(a=instruction[2],b=instruction[0],out=onejne);
And(a=notzr,b=onejne,out=jne);

And(a=instruction[1],b=instruction[0],out=onejge);
And(a=zr,b=onejge,out=jge);
And(a=notng,b=onejge,out=jgeAn);

And(a=instruction[2],b=ng,out=jlt);

And(a=instruction[1],b=zr,out=jeq);

And(a=instruction[0],b=notng,out=onejgt);
And(a=onejgt,b=notzr,out=jgt);


Or(a=jmp,b=jle,out=or1);

Or(a=or1,b=jleAn,out=or2);

Or(a=jne,b=or2,out=or3);

Or(a=jge,b=or3,out=or4);

Or(a=jgeAn,b=or4,out=or5);

Or(a=jlt,b=or5,out=or6);

Or(a=jeq,b=or6,out=or7);

Or(a=or7,b=jgt,out=jmpout);

//Or(a=jmp,b=jle,out=or9);

//Or(a=jmp,b=jle,out=or10);

And(a=instruction[15],b=jmpout,out=pcload);


PC(in=outA,reset=reset,load=pcload,inc=true,out[0..14]=pc);

}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
static int n;
    /** Initializes the library. */
    function void init() {
        let n = 16;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    var int shiftedX,sum,j,b;
    let sum = 0;
    let shiftedX = x;
    let b = 1;
    let j = 0;
    while(j<16)
    {

        if(y & b) //getting y bit
        {
            let sum = sum + shiftedX;
        }
        shiftedX = shiftedX + shiftedX;
        let j=j+1;
        let b=b+b;
    }
    return sum;
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
var int div,rem;

let div = 0; 
let rem = x;

while(rem <= x)
    {
        rem = rem - y;
        div = div +1;

    }
    return div;

    }
//power calculation
function int pow(int x, int y)
{var int multiply;
    let multiply = 1;

while(y!=0)
{
    multiply =multiply*x;
let y = y-1;
}
return multiply;
}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
var int y,j;
let j = (n/2)-1 ;

while(j!=-1)
{
    if(((y + Math.pow(2,j))+ (y + Math.pow(2,j))) <= x )
    {
        let y = y + Math.pow(2,j)
    }
    let j = j-1;
    }
return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a>b)
        {
            return a;
            }
    else 
    {
        return b; }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {

        if(a>b)
        {
            return b;
            }
    else 
    {
        return a; 
    }
    }
}

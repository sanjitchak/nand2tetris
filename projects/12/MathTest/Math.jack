// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
static int n;
    /** Initializes the library. */
    function void init() {
        let n = 16;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x<0)
        {
           let x = -(x);
           return x;
        }
        if (x>0) {
return x;
        }
        return 0;
            
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    var int shiftedX,sum,j,b;
    let sum = 0;
    let shiftedX = x;
    let b = 1;
    let j = 0;
    while(j<n)
    {

        if((y & b) = b) //getting y bit
        {
            let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let j=j+1;
        let b=b+b;
    }

    return sum;
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
 var int q,xsign,ysign,rem;
 let xsign =1;
 let ysign = 1;
if(x < 0)
{
    let x = Math.abs(x);
    let xsign = -1;
    }
if(y<0)
{
    let y = Math.abs(y);
    let ysign = -1;
}
 if((y > x))
	  { 
          return 0;
   }


   let q = Math.divide(x, 2*y);
 
 if((x-(2*q*y))<y)
   {
       let q = Math.abs(q);
	   let rem = (2*q);
       if((xsign * ysign ) < 0)
       {
           let rem = -(rem);
       }
       return rem;
	   
   }
   else {
       let q = Math.abs(q);
	   let rem = ((2*q)+1);
       if((xsign * ysign ) < 0)
       {
           let rem = -(rem);
       }
       return rem;
       }
    }
//power calculation
function int pow(int x, int y)
{var int multiply;
    let multiply = 1;

while(~(y=0))
{
    let multiply =multiply*x;
let y = y-1;
}
return multiply;
}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
var int y,j;
let j = (n/2)-1 ;

let y = 0;

while(j>-1)
{
    if((((y +      Math.pow(2,j))* (y + Math.pow(2,j))) > 0) &   ((((y + Math.pow(2,j))* (y + Math.pow(2,j))) = x ) | (((y + Math.pow(2,j))* (y + Math.pow(2,j))) < x ))  ) 
    {
        let y = y + Math.pow(2,j);
    }

    let j = j-1;
    }

return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a>b)
        {
            return a;
            }
    else 
    {
        return b; }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {

        if(a>b)
        {
            return b;
            }
    else 
    {
        return a; 
    }
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    field Array str;
    field int length;
    constructor String new(int maxLength) {
   if(maxLength < 0)
   { 
      do Sys.error(14); 
      }
       else {
    
   let str = Array.new(maxLength+1);
        //do Sys.halt();
 }
 let length = 0;
    return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
    return ;
    }

    /** Returns the current length of this string. */
    method int length() {
    return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    let str[j] = c;
    return ;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    let str[length] = c;
    let length = length +1;
    return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    let str[length-1] = 0;
    let length = length -1;
    return ;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
var int c,s,i,dash;
let dash = 0;   
let s = 0; 
let i = 0;
while(i < length())
{
let c = charAt(i);
if(c=45)
   {
       let dash =1;
   }
   if(c = 48)
   {
       let s = s*10;
   }
   if(c = 49)
   {
       let s = s*10;
       let s = s+1;
   }

   if(c = 50)
   {
       let s = s*10;
       let s = s+2;
   }
   if(c = 51)
   {
       let s = s*10;
       let s = s+3;
   }
   if(c = 52)
   {
       let s = s*10;
       let s = s+4;
   }
   if(c = 53)
   {
       let s = s*10;
       let s = s+5;
   }
   if(c = 54)
   {
       let s = s*10;
       let s = s+6;
   }
   if(c = 55)
   {
       let s = s*10;
       let s = s+7;
   }
   if(c = 56)
   {
       let s = s*10;
       let s = s+8;
   }
   if(c = 57)
   {
       let s = s*10;
       let s = s+9;
   }
let i = i+1;
}
if(dash = 1)
{
    let s = s * -1;
}

return s;
}

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
var int digitplace,n;
let length = 0;
    if(val < -1)
    {
    let val = val * -1;
   do appendChar(45);
   }
   while(true)
    {

let digitplace = 1;
let n = val;
while(n > 9)
{ let n = n/10;
let digitplace = digitplace*10;
    }

do appendChar(n+48);
if(val < 1)
{
    return;
}
let val = val - (n*digitplace);
    }
 return ;
}
function int modulus(int x, int y)
        {
      return (x-((x/y)*y));
       }

    /** Returns the new line character. */
    function char newLine() {
    var char c;
    let c = 128;
    return c;
    }

    /** Returns the backspace character. */
    function char backSpace() {
    var char c;
    let c = 129;
    return c;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
   var char c;
  let c = 34; 
   return c;
    }
}

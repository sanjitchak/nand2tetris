// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
static int column,row;
    /** Initializes the keyboard. */
    function void init() {
        let column = 0;
        let row = 0;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        if (Memory.peek(24576) = 0)
        {
          return 0;
        }
        else 
        {
return Memory.peek(24576);
        }
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
    */
    function void moveCursor(int i, int j)
{

do Screen.drawRectangle(j*8,i*11, (j*8)+7, (i*11)+10);
let row = i;
let column =j;
        return;
}
    /** Displays the given character at the cursor location,
     *  and advances the cursor one column forward. */
    function char readChar() {
var char c;
do Keyboard.moveCursor(row,column);
while(~Keyboard.keyPressed())
{
}
let c = Keyboard.keyPressed();
while(Keyboard.keyPressed())
{
    }
    do Screen.setColor(false);
    do Keyboard.moveCursor(row,column);
do Output.printChar(c);
    do Screen.setColor(true);
    
    if(((column*8)+7) < 511)
    {
    do Keyboard.moveCursor(row,column+1);
       
        }
        else
        {
            if(((row*11)+10) < 251)
           {
    do Keyboard.moveCursor(row+1,0);
    }
    else{
        do Keyboard.moveCursor(0,0);
    }
return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        return message;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
    return;
    }
}
